// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favoriteMovie String[]
  accounts      Account[]
  sessions      Session[]
  movie         Movie[]
  payment       Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id            String    @id @default(cuid())
  userId        String
  createdAt     DateTime  @default(now())
  title         String
  overview      String
  poster_path   String
  backdrop_path String
  genres        String[]
  category      String[]
  release_date  String
  trailer       String
  movieDuration String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment       Payment[]
}

model PaymentPlan {
  id               String    @id @default(cuid())
  packageName      String
  capacity         Int
  screenResolution Int
  price            Int
}

model PaymentCard {
  id               String    @id @default(cuid())
  numberCard       String
  nameCard         String
  imageCard        String
  categoryInstitue String
  imageQR          String?
}

model Payment {
  id             String         @id @default(cuid())
  userId         String
  movieId        String
  createdAt      DateTime       @default(now())
  userName       String
  userEmail      String
  startTime      DateTime
  endTime        DateTime
  feeAdmin       Int
  price          Int
  totalPrice     Int
  packageName    String
  methodPayment  String
  promoCode      String
  status         String
  room           Int
  expiredPayment DateTime
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie          Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model PaymentPromo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  promoCode String
  priceDisc Int
  usable    DateTime
  expired   DateTime
}